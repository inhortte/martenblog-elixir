defmodule Martenblog.Schema do
  use Absinthe.Schema
  require Logger

  alias Martenblog.Resolver

  #object :topic do
#    field :_id, :id do
#      resolve fn topic, _, _ ->
#	{:ok, Map.get(topic, "_id")}
#      end
#    end
#    field :topic, :string do
#      resolve fn topic, _, _ ->
#	{:ok, Map.get(topic, "topic")}
#      end
#    end	
#    field :entry_ids, list_of(:id) do
#      resolve fn topic, _, _ ->
#	{:ok, Map.get(topic, "entry_ids")}
#      end
#    end
#  end

  object :topic do
    field :_id, :id
    field :topic, :string
    field :entry_ids, list_of(:id)
  end

  object :entry do
    field :_id, :id
    field :entry, :string
    field :created_at, :integer
    field :subject, :string
    field :topic_ids, list_of(:id)
  end
  
  query do
    field :all_topics, list_of(non_null(:topic)) do
      resolve &Resolver.all_topics/3
    end
    field :last_topic, non_null(:topic) do
      resolve &Resolver.last_topic/3
    end
    field :entries_paged, list_of(non_null(:entry)) do
      arg :page, non_null(:integer)
      arg :limit, :integer
      arg :topic_ids, list_of(non_null(:id))
      arg :search, :string
      resolve &Resolver.entries_paged/3
    end
    field :entry_by_id, non_null(:entry) do
      arg :id, non_null(:id)
      resolve &Resolver.entry_by_id/3
    end
    field :topics_by_ids, list_of(non_null(:topic)) do
      arg :ids, non_null(list_of(non_null(:id)))
      resolve &Resolver.topics_by_ids/3
    end
  end

  def middleware(middleware, %{identifier: identifier} = field, object) do
    new_middleware_spec = {{__MODULE__, :get_string_key}, Atom.to_string(identifier)}
    Absinthe.Schema.replace_default(middleware, new_middleware_spec, field, object)
  end

  def get_string_key(%{source: source} = res, key) do
    %{res | state: :resolved, value: Map.get(source, key)}
  end
end
